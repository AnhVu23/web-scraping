# Reusable components for swagger
#
# @author Anh Vu <anh.vu@vertics.co>
#
# @copyright Vertics Oy 2020
#
components:
  # Reusable schemas, can be referenced as #/components/schemas/{schemas-name}
  schemas:
  # Reusable request bodies: #components/requestBodies/{request-name}
  requestBodies:
    SignUpAdmin:
      type: object
      properties:
        name:
          type: string
          example: John Smith
        email:
          type: string
          example: john@example.com
        phoneNumber:
          type: string
          example: 0469132412
        address:
          type: string
          example: Otakaari 5
        postalCode:
          type: string
          example: 02510
        city:
          type: string
          example: Espoo
        additionalInformation:
          type: string
          example: I want to work near home.
        birthDay:
          type: Date
          example: '2020-07-02'
        carAvailable:
          type: boolean
          example: true
        cv:
          $ref: '#/components/schemas/File'
        company:
          $ref: '#/components/schemas/Company'
        employmentContract:
          $ref: '#/components/schemas/File'
        profileImage:
          $ref: '#/components/schemas/File'
      required:
      - email
      - name
      - phoneNumber
      - city
      - postalCode
      - address
    SignUpUser:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: John Smith
        email:
          type: string
          example: john@example.com
        phoneNumber:
          type: string
          example: 046913212
        address:
          type: string
          example: Otakaari 5
        postalCode:
          type: string
          example: 02510
        city:
          type: string
          example: Espoo
        additionalInformation:
          type: string
          example: I want to work near home.
        role:
          type: string
          example: admin
        birthDay:
          type: Date
          example: '2020-07-02'
        promotionExperience:
          type: string
          example: I have been working in the industry for 10 years.
        hobbies:
          type: string
          example: I love walking.
        status:
          type: string
          example: activated
        availableTimes:
          $ref: '#/components/schemas/AvailableTimesArray'
        availableCities:
          $ref: '#/components/schemas/CityArray'
        carAvailable:
          type: boolean
          example: true
        education:
          type: string
          example: Bachelor degree at Aalto University.
        workExperience:
          type: string
          example: I have been working for X Oy for 3 years.
        alcoholPassport:
          $ref: '#/components/schemas/File'
        hygienePassport:
          $ref: '#/components/schemas/File'
        cv:
          $ref: '#/components/schemas/File'
        employmentContract:
          $ref: '#/components/schemas/File'
        profileImage:
          $ref: '#/components/schemas/File'
        height:
          type: number
          example: 180
        trousersSize:
          type: number
          example: 30
        shirtSize:
          type: string
          example: 30
        shoeSize:
          type: number
          example: 40
        company:
          $ref: '#/components/schemas/Company'
        languages:
          type: array
          items:
            type: object
            properties:
              language:
                $ref: '#components/schemas/Language'
              skillLevel:
                type: enum
                example: native
        driverLicense:
          type: string
          description: Driver license. Each class should separate by space
          example: "A B"
        availableRoles:
          $ref: '#/components/schemas/roleArray'
        otherFiles:
          type: array
          items:
            $ref: '#/components/schemas/File'
        sunnyoneExperiences:
          type: array
          items:
            $ref: '#/components/schemas/SunnyoneExperienceCommon'
      required:
      - email
      - name
      - phoneNumber
      - city
      - postalCode
      - address
    SignIn:
      type: object
      properties:
        email:
          type: string
          format: email
          example: testi@vertics.co
        password:
          type: string
          example: Otakaari5
      required:
        - email
        - password
    BodyWithRefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyLCJ0b2tlbklkIjo2LCJpYXQiOjE1OTM2ODY3NDl9.H_DCM_O4PlJW5_zmQow3yYBB8ivHAIAOLkRqvH8BvsY
      required:
        - refreshToken

  # Reusable schemas, can be referenced as #/components/responses/{response-name}
  responses:
    204:
      description: The request is success but return nothing
    400:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    401:
      description: Missing access token, invalid access token or invalid refresh token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    403:
      description: Invalid permission/role to access the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    404:
      description: Could not find entity by id
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    409:
      description: Conflict with other entities when making a request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'



